---
title: "Desafio VivaReal"
?na.pass
?pass
Sys.time()
Sys.time()
ptm <- proc.time()
ptm
start_time <- Sys.time()
print(paste("Start: ", start_time)
)
start_time <- Sys.time()
print(paste("Start: ", start_time)
)
print(paste("Took: ", end_time - start_time))
end_time <- Sys.time()
print(paste("Took: ", end_time - start_time))
print(paste("Took: ", end_time - start_time))
as.difftime(end_time, start_time, units = "mins")
as.difftime(c(end_time, start_time), units = "mins")
as.difftime(c(end_time, start_time), units = "mins")
as.difftime(end_time - start_time, units = "mins")
as.difftime(end_time - start_time, units = "secs")
as.difftime(end_time - start_time, units = "secs")
as.difftime(end_time - start_time, units = "secs")
as.numeric(end_time - start_time, units = "secs")
as.numeric(end_time - start_time)
as.difftime(end_time - start_time)
as.numeric(end_time - start_time, units="secs")
print(paste("Took: ", as.numeric(end_time - start_time, units="mins"), "minutes"))
print(paste("Took: ", round(as.numeric(end_time - start_time, units="mins"), "minutes")))
print(paste("Took: ", round(as.numeric(end_time - start_time, units="mins"), "minutes")))
print(paste("Took: ", round(as.numeric(end_time - start_time, units="mins")), "minutes"))
methods <- list(
# lad,     ### n達o funciona com o YeoJohnson
# getModelInfo("RRF", regex=FALSE)[[1]],     ### muuuuuuito lento!!!
getModelInfo("gcvEarth", regex=FALSE)[[1]],
getModelInfo("lm", regex=FALSE)[[1]],
# getModelInfo("glm", regex=FALSE)[[1]],
getModelInfo("glmnet", regex=FALSE)[[1]],
getModelInfo("svmRadial", regex=FALSE)[[1]],
# getModelInfo("rpart", regex=FALSE)[[1]],
# getModelInfo("knn", regex=FALSE)[[1]]
# getModelInfo("earth", regex=FALSE)[[1]]
getModelInfo("bagEarth", regex=FALSE)[[1]]
)
method_names_init <- c(
# "lad",     ### n達o funciona com o YeoJohnson
# "RRF",     ### muuuuuuito lento!!!
"gcvEarth",
"lm",
# "glm",
"glmnet",
"svmRadial",
# "rpart",
# "knn"
# "earth"
"bagEarth"
)
# grid <- expand.grid(.cp=c(0, 0.05, 0.1))
preproc_scale <- list(
c("")
# c("center"),
# c("scale"),
# c("center", "scale" )
)
preproc_power <- c(
"",
# "BoxCox",
"YeoJohnson"
# "expoTrans"
)
preproc_impute  <- c(
"knnImpute",
# "bagImpute"
"medianImpute"
)
preproc_project <- c(
""
# "pca",
# "ica",
# "spatialSign"
)
preProcs <- list()
x <- 1
for (i in 1:length(preproc_scale)) {
for (j in 1:length(preproc_power)) {
for (k in 1:length(preproc_impute)) {
for (l in 1:length(preproc_project)) {
aux <- preproc_scale[i]
aux <- mapply(c, aux, preproc_impute[k], SIMPLIFY=FALSE)
aux <- mapply(c, aux, preproc_power[j], SIMPLIFY=FALSE)
aux <- mapply(c, aux, preproc_project[l], SIMPLIFY=FALSE)
aux <- aux[[1]]
if (!all(aux == "")) {
aux <- aux[aux != ""]
preProcs[[x]] <- aux
x <- x + 1
}
}
}
}
}
preProcs <- unique(preProcs)
medianSummary <- function (data, lev=NULL, model=NULL) {
out <- median(abs(data$obs - data$pred))
names(out) <- "MED"
out
}
trainControl <- trainControl(
summaryFunction=medianSummary,
method="repeatedcv",
# number=10,
number=3,
repeats=3
# search="random",
# index=createFolds(iris$Species)
)
methods <- list(
# lad,     ### n達o funciona com o YeoJohnson
# getModelInfo("RRF", regex=FALSE)[[1]],     ### muuuuuuito lento!!!
getModelInfo("gcvEarth", regex=FALSE)[[1]],
getModelInfo("lm", regex=FALSE)[[1]],
# getModelInfo("glm", regex=FALSE)[[1]],
getModelInfo("glmnet", regex=FALSE)[[1]],
getModelInfo("svmRadial", regex=FALSE)[[1]],
# getModelInfo("rpart", regex=FALSE)[[1]],
# getModelInfo("knn", regex=FALSE)[[1]]
# getModelInfo("earth", regex=FALSE)[[1]]
getModelInfo("bagEarth", regex=FALSE)[[1]]
)
method_names_init <- c(
# "lad",     ### n達o funciona com o YeoJohnson
# "RRF",     ### muuuuuuito lento!!!
"gcvEarth",
"lm",
# "glm",
"glmnet",
"svmRadial",
# "rpart",
# "knn"
# "earth"
"bagEarth"
)
# grid <- expand.grid(.cp=c(0, 0.05, 0.1))
preproc_scale <- list(
c("")
# c("center"),
# c("scale"),
# c("center", "scale" )
)
preproc_power <- c(
"",
# "BoxCox",
"YeoJohnson"
# "expoTrans"
)
preproc_impute  <- c(
"knnImpute",
# "bagImpute"
"medianImpute"
)
preproc_project <- c(
""
# "pca",
# "ica",
# "spatialSign"
)
preProcs <- list()
x <- 1
for (i in 1:length(preproc_scale)) {
for (j in 1:length(preproc_power)) {
for (k in 1:length(preproc_impute)) {
for (l in 1:length(preproc_project)) {
aux <- preproc_scale[i]
aux <- mapply(c, aux, preproc_impute[k], SIMPLIFY=FALSE)
aux <- mapply(c, aux, preproc_power[j], SIMPLIFY=FALSE)
aux <- mapply(c, aux, preproc_project[l], SIMPLIFY=FALSE)
aux <- aux[[1]]
if (!all(aux == "")) {
aux <- aux[aux != ""]
preProcs[[x]] <- aux
x <- x + 1
}
}
}
}
}
preProcs <- unique(preProcs)
getwd()
setwd("~/Documents/empregos")
fit <- loadRDS("fit.rds")
library(RDS)
fit <- readRDS("fit.rds")
dir()
setwd("~/Documents/empregos/vivareal")
fit <- readRDS("fit.rds")
results <- list()
for (i in 1:length(method_names)) {
method <- toupper(method_names[i])
results[[method]] <- fit[[i]]
}
results <- resamples(results)
dotplot(results)
x <- summary(results)$statistics$MED
x[order(x[, "Median"]), ]
method_names <- list()
num_preProcs <- length(preProcs)
num_methods <- length(methods)
for (i in 1:num_preProcs) {
for (j in 1:num_methods) {
method_names[x]=paste(preProcs[[i]], collapse="_", sep="_")
method_names[x]=paste(method_names_init[j], method_names[x], sep="_")
}
}
results <- list()
for (i in 1:length(method_names)) {
method <- toupper(method_names[i])
results[[method]] <- fit[[i]]
}
results <- resamples(results)
dotplot(results)
x <- summary(results)$statistics$MED
x[order(x[, "Median"]), ]
results <- list()
# for (i in 1:length(method_names)) {
for (i in 1:3) {
method <- toupper(method_names[i])
results[[method]] <- fit[[i]]
}
results <- resamples(results)
dotplot(results)
x <- summary(results)$statistics$MED
x[order(x[, "Median"]), ]
length(fit)
fit <- readRDS("fit.rds")
results <- list()
# for (i in 1:length(method_names)) {
for (i in 1:3) {
method <- toupper(method_names[i])
results[[method]] <- fit[[i]]
}
results <- resamples(results)
dotplot(results)
x <- summary(results)$statistics$MED
x[order(x[, "Median"]), ]
library(plyr)
library(dplyr)
library(tidyr)
library(caret)
library(randomForest)
library(monomvn)
library(Amelia)
library(L1pack)
library(combinat)
library(knitr)
library(corrplot)
library(RRF)
require(car)
# Compare algorithms
results <- list()
# for (i in 1:length(method_names)) {
for (i in 1:3) {
method <- toupper(method_names[i])
results[[method]] <- fit[[i]]
}
results <- resamples(results)
dotplot(results)
x <- summary(results)$statistics$MED
x[order(x[, "Median"]), ]
method
method_names[i]
method_names <- list()
num_preProcs <- length(preProcs)
num_methods <- length(methods)
for (i in 1:num_preProcs) {
for (j in 1:num_methods) {
method_names[x]=paste(preProcs[[i]], collapse="_", sep="_")
method_names[x]=paste(method_names_init[j], method_names[x], sep="_")
}
}
method_names[i]
preProcs
method_names_init
method_names
method_names <- list()
num_preProcs <- length(preProcs)
num_methods <- length(methods)
x <- 1
for (i in 1:num_preProcs) {
for (j in 1:num_methods) {
method_names[x]=paste(preProcs[[i]], collapse="_", sep="_")
method_names[x]=paste(method_names_init[j], method_names[x], sep="_")
x <- x + 1
}
}
method_names
# Compare algorithms
results <- list()
# for (i in 1:length(method_names)) {
for (i in 1:3) {
method <- toupper(method_names[i])
results[[method]] <- fit[[i]]
}
results <- resamples(results)
dotplot(results)
x <- summary(results)$statistics$MED
x[order(x[, "Median"]), ]
?preProcess
fit_file <- "fit_round_4.RData"
load(fit_file)
results <- list()
res <- NULL
for (i in 1:length(fit)) {
if (!fit[[i]]$ema.has_error) {
method_id <- toupper(fit[[i]]$ema.method_id)
results[[method_id]] <- fit[[i]]
} else {
print(paste("Found error in position", i, "!"))
print(fit$ema.error)
}
}
results <- resamples(results)
dotplot(results)
res <- summary(results)$statistics$MED
res[order(res[, "Median"]), ]
